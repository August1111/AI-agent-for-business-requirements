import json
import os
from dotenv import load_dotenv
from langchain_gigachat.tools.giga_tool import giga_tool
from langchain_gigachat.chat_models import GigaChat
from langchain_core.messages import HumanMessage, SystemMessage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á –∏–∑ .env
load_dotenv()
GIGA_KEY = os.environ.get('GIGA_KEY')


@giga_tool
def relevance_classifier(inputs: dict) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø—Ä–æ–¥—É–∫—Ç—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ inputs["product"].
    –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–∞:
    {
        "input_text": {
            "files": {
                "–∏–º—è_—Ñ–∞–π–ª–∞1": "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ1",
                "–∏–º—è_—Ñ–∞–π–ª–∞2": "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ2",
                ...
            }
        },
        "product": "–ú–æ–Ω–µ—Ç—ã"
    }
    """
    try:
        input_text = inputs.get("input_text", {})
        files = input_text.get("files", {})
        product = inputs.get("product", "")

        if not files or not product:
            return json.dumps({
                "status": "error",
                "explanation": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞."
            }, ensure_ascii=False)

        llm = GigaChat(
            credentials=GIGA_KEY,
            verify_ssl_certs=False,
            scope="GIGACHAT_API_PERS",
            model="GigaChat-2-Max",
            auto_upload_images=True
        )

        relevant = []
        irrelevant = []

        system_prompt = (
            f"–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. "
            f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫ –ø—Ä–æ–¥—É–∫—Ç—É –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"{product}\"."
        )
        system_message = SystemMessage(content=system_prompt)

        for filename, content in files.items():
            user_prompt = (
                f"–í–æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n\n"
                f"{content}\n\n"
                "–°–æ–æ–±—â–∏, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É. "
                "–û—Ç–≤–µ—Ç—å 'Yes' –∏–ª–∏ 'No' –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ."
            )
            user_message = HumanMessage(content=user_prompt)
            response = llm.invoke([system_message, user_message])
            answer = str(response.content)

            if "Yes" in answer:
                relevant.append({"file": filename, "explanation": answer})
            else:
                irrelevant.append(filename)

        return json.dumps({
            "status": "OK",
            "relevant_data": relevant,
            "irrelevant_data": irrelevant
        }, ensure_ascii=False)

    except Exception as e:
        return json.dumps({
            "status": "error",
            "explanation": str(e)
        }, ensure_ascii=False)

# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç)
if __name__ == "__main__":

    test_data = {
        "input_text": {
            "files": {
                "letter1.txt": "üìß 1. –¢–µ–º–∞: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–Ω–µ—Ç\n–û—Ç: –¢–∏–º—É—Ä –•–∞–±–∏–±—É–ª–ª–∏–Ω, –í–µ–¥—É—â–∏–π Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n–ö–æ–º—É: –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n–î–∞—Ç–∞: 06.04.2025\n\n–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∫–æ–ª–ª–µ–≥–∏.\n\n–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–Ω–µ—Ç, —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, –∏ —è –ø—Ä–æ—à—É –≤–∞—Å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏.\n\n–ë–∞–∑–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ coins –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id, name, year, metal, weight, country, condition, price, description, image_urls.\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–¥–µ–ª–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: countries, metals, conditions.\n\n–°–ø–∞—Å–∏–±–æ!\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–¢–∏–º—É—Ä",
                "letter10.txt": "üìß 10. –¢–µ–º–∞: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—á—ë—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–û—Ç: –ê–ª–µ–∫—Å–µ–π –ú–æ—Ä–æ–∑–æ–≤\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å—Ä–æ–∫–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
            }
        },
        "product": "–ú–æ–Ω–µ—Ç—ã"
    }

    result = relevance_classifier.invoke({"inputs": test_data})


    print(result)
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      